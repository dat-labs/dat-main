services:
  message-queue:
    image: rabbitmq:3.10.5
    container_name: dat-dev-message-queue
    environment:
      RABBITMQ_DEFAULT_USER: mq_user
      RABBITMQ_DEFAULT_PASS: mq_pass
    volumes:
      - ./rabbitmq-data:/var/lib/rabbitmq
    ports:
      - 5672:5672
    networks:
      - dat-network
    healthcheck:
      test: "exit 0"
  api:
    container_name: dat-dev-api
    build:
      context: "./dat-api"
    volumes:
      - ./dat-api:/app
      - ./dat-core:/usr/local/src/dat-core
      - ./verified-sources:/usr/local/src/verified-sources
      - ./verified-generators:/usr/local/src/verified-generators
      - ./verified-destinations:/usr/local/src/verified-destinations
    healthcheck:
      test: "exit 0"
    environment:
      - MINIO_BUCKET_NAME=dat
      - MINIO_ENDPOINT=object-storage:9000
      - MINIO_ROOT_USER=los_user
      - MINIO_ROOT_PASSWORD=los_pass
    depends_on:
      db-backend:
        condition: service_healthy
    ports:
      - 8000:8000
    networks:
     - dat-network
  orchestrator:
    container_name: dat-dev-orchestrator
    build:
      context: "./dat-orchestrator"
    volumes:
      - ./dat-orchestrator:/repo
      - ./dat-core:/usr/local/src/dat-core
      - ./dat-api-sdk:/usr/local/src/dat-api-sdk
      - ./verified-sources:/usr/local/src/verified-sources
      - ./verified-generators:/usr/local/src/verified-generators
      - ./verified-destinations:/usr/local/src/verified-destinations
    depends_on:
      message-queue:
        condition: service_healthy
    networks:
     - dat-network
  telemetry:
    container_name: dat-dev-telemetry
    build:
      context: "./dat-telemetry"
    volumes:
      - ./dat-telemetry:/repo
      - ./dat-api-sdk:/usr/local/src/dat-api-sdk
    depends_on:
      message-queue:
        condition: service_healthy
    networks:
     - dat-network
  scheduler:
    container_name: dat-dev-scheduler
    build:
      context: "./dat-scheduler"
    volumes:
      - ./dat-scheduler:/repo
    depends_on:
      message-queue:
        condition: service_healthy
    networks:
     - dat-network
  db-backend:
    container_name: dat-dev-db-backend
    image: postgres:latest
    volumes:
      - ./db-data:/var/lib/postgresql/data
      - ./db-scripts:/docker-entrypoint-initdb.d
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: dat_backend
    networks:
     - dat-network
    healthcheck:
      test: "exit 0"
  ui:
    container_name: dat-dev-ui
    build:
      context: "./dat-ui"
      dockerfile: "Dockerfile.dev"
    volumes:
      - ./dat-ui:/app
      - /app/node_modules
    ports:
      - 3000:3000
    networks:
     - dat-network
    healthcheck:
      test: "exit 0"
    depends_on:
      api:
        condition: service_healthy
  object-storage:
    image: minio/minio:latest
    volumes:
      - ./object-storage-data:/data
    environment:
      MINIO_ROOT_USER: "los_user"
      MINIO_ROOT_PASSWORD: "los_pass"
    ports:
      - 9000:9000
      - 9001:9001
    command: server --address ":9000" --console-address ":9001" /data
    networks:
     - dat-network
  ready:
    container_name: dat-dev-ready
    image: busybox
    command: wget -qO - https://raw.githubusercontent.com/dat-labs/dat-main/main/txt/dat-build-complete.txt | cat
    depends_on:
      ui:
        condition: service_healthy
    networks:
     - dat-network

networks:
  dat-network:
    name: dat-dev-network
    driver: bridge