from verified_sources.<module_name>.source import <actor_name>
from verified_sources.<module_name>.catalog import <actor_name>Catalog
from dat_core.pydantic_models import (
    ConnectorSpecification, DatConnectionStatus, DatCatalog,
    DatDocumentStream,
)
from conftest import *


def test_check(valid_connection_object):
    check_connection_tpl = <actor_name>().check(
        config=ConnectorSpecification(
            name='<actor_name>',
            connection_specification=valid_connection_object,
            module_name='<module_name>'
        )
    )
    assert isinstance(check_connection_tpl, DatConnectionStatus)
    assert check_connection_tpl.status.name == 'SUCCEEDED'


def test_discover(valid_connection_object):
    _d = <actor_name>().discover(
        config=ConnectorSpecification(
            name='<actor_name>',
            connection_specification=valid_connection_object,
            module_name='<module_name>'
        )
    )
    assert isinstance(_d, dict)


def test_read(valid_connection_object, valid_catalog_object):
    config = ConnectorSpecification(
        name='<actor_name>',
        connection_specification=valid_connection_object,
        module_name='<module_name>'
    )

    <module_name> = <actor_name>()
    records = <module_name>.read(
        config=config,
        catalog=<actor_name>Catalog(**valid_catalog_object),
    )
    for record in records:
        assert DatDocumentStream.model_validate(record)
